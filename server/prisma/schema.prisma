generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  userId    Int
  User      User     @relation("UserRefreshTokens", fields: [userId], references: [uid], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum RegistrationType {
  FORM
  GOOGLE
}

enum PrefferedLanguage {
  RO
  EN
}

enum PrefferedTheme {
  DARK
  LIGHT
}

model User {
  uid                  Int                @id @default(autoincrement())
  registrationType     RegistrationType   @default(FORM)
  username             String
  password             String?
  email                String             @unique
  admin                Boolean            @default(false)
  refreshToken         RefreshToken[]     @relation("UserRefreshTokens")
  photoURL             String             @default("https://i.imgur.com/FUJE2dK.png")
  prefferedLanguage    PrefferedLanguage  @default(EN)
  prefferedTheme       PrefferedTheme     @default(DARK)
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  created              DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  sheets               Spreadsheet[]      @relation("UserSpreadsheets")
  sharedSpreadsheets   SpreadsheetShare[] @relation("UserSharedSpreadsheets")
}

enum SpreadsheetTypes {
  NORMAL
  CS
}

enum PermissionType {
  VIEW
  EDIT
}

model Spreadsheet {
  id             Int                @id @default(autoincrement())
  ownerId        Int
  type           SpreadsheetTypes
  name           String
  sharedUsersIds Json?
  lastOpened     DateTime
  sheets         Sheet[]            @relation("SpreadsheetSheets")
  created        DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  User           User               @relation("UserSpreadsheets", fields: [ownerId], references: [uid], onDelete: Cascade)
  sharedUsers    SpreadsheetShare[] @relation("SpreadsheetSharedUsers")

  @@index([ownerId])
}

model SpreadsheetShare {
  id            Int            @id @default(autoincrement())
  spreadsheetId Int
  userId        Int
  permission    PermissionType
  lastOpened    DateTime?
  Spreadsheet   Spreadsheet    @relation("SpreadsheetSharedUsers", fields: [spreadsheetId], references: [id], onDelete: Cascade)
  User          User           @relation("UserSharedSpreadsheets", fields: [userId], references: [uid], onDelete: Cascade)

  @@unique([spreadsheetId, userId]) // can not have both edit and view
  @@index([userId])
}

model Sheet {
  id            Int         @id @default(autoincrement())
  spreadsheetId Int
  name          String      @default("Sheet 1")
  index         Int
  color         String      @default("#ffffff")
  numRows       Int         @default(100)
  numCols       Int         @default(26)
  columnWidths  Json?
  rowHeights    Json?
  hiddenCols    Json?
  hiddenRows    Json?
  created       DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Spreadsheet   Spreadsheet @relation("SpreadsheetSheets", fields: [spreadsheetId], references: [id], onDelete: Cascade)
  cells         Cell[]      @relation("SheetCells")

  @@index([spreadsheetId])
}

enum HorizontalAlignment {
  LEFT
  CENTER
  RIGHT
}

enum VerticalAlignment {
  TOP
  CENTER
  BOTTOM
}

model Cell {
  id         Int                 @id @default(autoincrement())
  sheetId    Int
  row        Int
  col        Int
  protected  Boolean             @default(false)
  bgColor    String              @default("#242424")
  color      String              @default("#ffffff")
  style      Json?
  hAlignment HorizontalAlignment @default(LEFT)
  vAlignment VerticalAlignment   @default(CENTER)
  content    String?
  created    DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  Sheet      Sheet               @relation("SheetCells", fields: [sheetId], references: [id], onDelete: Cascade)

  @@index([sheetId])
}

model SteamPrices {
  id             Int     @id @default(autoincrement())
  name           String  @unique
  priceLatest    Decimal
  priceReal      Decimal
  buyOrderPrice  Decimal
}
